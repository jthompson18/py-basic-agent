from __future__ import annotations
from typing import Any, Dict, List, Protocol


class Memory(Protocol):
    # Async-first interface (what the codebase should call)
    async def aadd(self, content: str, *, source: str = "log",
                   uri: str | None = None, meta: Dict[str, Any] | None = None) -> None: ...

    async def aupsert(self, docs: List[Dict[str, Any]]) -> int: ...
    async def aquery(self, q: str, k: int = 3) -> List[Dict[str, Any]]: ...
    async def adump(self, limit: int = 50) -> str: ...

    # Optional sync conveniences (used in a few tests)
    def add(self, content: str, *, source: str = "log",
            uri: str | None = None, meta: Dict[str, Any] | None = None) -> None: ...

    def upsert(self, docs: List[Dict[str, Any]]) -> int: ...
    def query(self, q: str, k: int = 3) -> List[Dict[str, Any]]: ...
    def dump(self, limit: int = 50) -> str: ...
